<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vue+Element UI</title>
    <link href="/2020/07/13/vue+Element%20UI/"/>
    <url>/2020/07/13/vue+Element%20UI/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-Element-UI"><a href="#vue-Element-UI" class="headerlink" title="vue+Element UI"></a>vue+Element UI</h2><p>Element UI后台管理系统主要的标签：</p><p>1.el-container：构建整个页面框架</p><p>2.el-aside：构建左侧菜单</p><p>3.el-menu：左侧菜单内容</p><p>  :default-openeds：默认展开的菜单，通过菜单的index值来关联</p><p>  :default-active：默认选中</p><p>4.el-submenu：可展开的菜单，常用属性：</p><p>​    index：菜单的下标，文本类型，不能是数值类型</p><ol start="5"><li><p>template：对应el-submenu的菜单名</p></li><li><p>i：设置菜单图标，通过class属性设置</p><p>el-icon-messae</p><p>el-icon-menu</p><p>el-icon-setting</p></li><li><p>el-menu-item：菜单的子节点，不可再展开</p><p>index：菜单的下标，文本类型，不能是数值类型</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot常用配置</title>
    <link href="/2020/07/13/springboot%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/07/13/springboot%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot常用配置"><a href="#springboot常用配置" class="headerlink" title="springboot常用配置"></a>springboot常用配置</h1><p><strong>数据源配置</strong></p><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.56.10:3306/数据库名</span>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span></code></pre><pre><code class="hljs xm"> &lt;!--导入mysql驱动--&gt;       &lt;dependency&gt;           &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;           &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;           &lt;version&gt;8.0.17&lt;&#x2F;version&gt;       &lt;&#x2F;dependency&gt;&lt;!--mybatis-plus--&gt;       &lt;dependency&gt;           &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;           &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;           &lt;version&gt;3.3.1.tmp&lt;&#x2F;version&gt;       &lt;&#x2F;dependency&gt;</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql</title>
    <link href="/2020/07/13/Mysql/"/>
    <url>/2020/07/13/Mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h2><p>原子性（atomicity）：对于一个事务，所有操作要么全部提交成功，要么全部失败。</p><p>一致性（consistency）：数据库总是从一个一致性的状态转换到另一个一致性的状态。例如银行转账失败，账户也不会损失。</p><p>隔离性（isolation）：一个事务所做的修改在最终提交之前，对其他事务是不可见的。</p><p>持久性（durability）：一旦事务提交，其所做的修改就会永久保存到数据库中，即使系统崩溃数据也不会丢失。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p><strong>READ UNCOMMITTED（未提交读）</strong></p><p>事务中的修改，即使没有提交，对其他事物也都是可见的。</p><p><strong>脏读</strong>：事务可以读取未提交的数据。</p><p><strong>READ COMMITTED（提交读）</strong>     不可重复读</p><p>大多数数据库系统的默认隔离级别（但Mysql不是）。一个事务从开始直到提交之前，所做的修改对其他事务都是不可见的。</p><p>执行两次相同的查询，可能得到不同的结果。</p><p><strong>REPEATABLE READ（可重复读）</strong>    Mysql的默认事务隔离级别</p><p>解决的脏读的问题。保证了在同一个事务中多次读取同样的记录的结果是一致的。</p><p><strong>幻读</strong>：当某个事务在读取某个范围内的记录时，另一个事务又在该范围插入了新的记录，当之前的事务再次读取该范围的记录时会产生幻行。</p><p><strong>SERIALIZABLE（可串行化）</strong></p><p>最高的隔离级别，通过强制事务串行执行，避免了幻读的问题。在读取的每一行数据上都加锁</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁指两个或多个事务在同一资源上相互占用，并请求锁定对方所占用的资源，导致恶性循环的结果。</p><p>InnoDB处理死锁的方法：将持有最少行级排他锁的事务进行回滚。</p><h2 id="多版本并发控制（MVCC）"><a href="#多版本并发控制（MVCC）" class="headerlink" title="多版本并发控制（MVCC）"></a>多版本并发控制（MVCC）</h2><p>MVCC的实现，是通过保存数据在某个时间点的快照来实现的。也就是说，不管执行多长时间，每个事务看到的数据都是一致的。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引（在Mysql中也叫“键”）是存储引擎用于快速找到记录的一种数据结构</p><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h3><p>B-Tree有许多变种，其中最常见的是B+Tree，例如MySQL就普遍使用B+Tree实现其索引结构。</p><p>与B-Tree相比，B+Tree有以下不同点：</p><p>每个节点的指针上限为2d而不是2d+1。</p><p>内节点不存储data，只存储key；叶子节点不存储指针。  </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>7-7学习笔记</title>
    <link href="/2020/07/13/7-7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/13/7-7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="算法：广度优先搜索（BFS）"><a href="#算法：广度优先搜索（BFS）" class="headerlink" title="算法：广度优先搜索（BFS）"></a>算法：广度优先搜索（BFS）</h2><p>BFS 相对 DFS 的最主要的区别是： BFS 找到的路径⼀定是最短的， 但代价就是空间复杂度⽐ DFS ⼤很多  。</p><pre><code class="hljs java"><span class="hljs-comment">// 计算从起点 start 到终点 target 的最近距离</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Node start, Node target)</span> </span>&#123;    Queue&lt;Node&gt; q; <span class="hljs-comment">// 核⼼数据结构</span>    Set&lt;Node&gt; visited; <span class="hljs-comment">// 避免⾛回头路</span>    q.offer(start); <span class="hljs-comment">// 将起点加⼊队列</span>    visited.add(start);    <span class="hljs-keyword">int</span> step = <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录扩散的步数</span>    <span class="hljs-keyword">while</span> (q not empty) &#123;        <span class="hljs-keyword">int</span> sz = q.size();        <span class="hljs-comment">/* 将当前队列中的所有节点向四周扩散 */</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++) &#123;            Node cur = q.poll();            <span class="hljs-comment">/* 划重点： 这⾥判断是否到达终点 */</span>            <span class="hljs-keyword">if</span> (cur is target)                <span class="hljs-keyword">return</span> step;            <span class="hljs-comment">/* 将 cur 的相邻节点加⼊队列 */</span>            <span class="hljs-keyword">for</span> (Node x : cur.adj())                <span class="hljs-keyword">if</span> (x not in visited) &#123;                    q.offer(x);                    visited.add(x);                &#125;        &#125;         <span class="hljs-comment">/* 划重点： 更新步数在这⾥ */</span>        step++;    &#125;&#125;</code></pre><h2 id="spring整合springmvc"><a href="#spring整合springmvc" class="headerlink" title="spring整合springmvc"></a>spring整合springmvc</h2><p>父配置扫描service、dao不扫描controller（applicationContext.xml）</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.yjh"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"annotation"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"org.springframework.stereotype.Controller"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span></code></pre><p>子配置只扫描controller（dispatcherServlet-servlet.xml）</p><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!--springMVC的配置文件，包含网站跳转逻辑的控制配置--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.yjh"</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">"false"</span>&gt;</span>     <span class="hljs-comment">&lt;!--只扫描控制器--&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"annotation"</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">"org.springframework.stereotype.Controller"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span></code></pre><h2 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h2><p>bean互相引用，形成闭环</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>能够分析类能力的程序</p><h2 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h2><p>session：服务端，session依赖于cookie</p><p>cookie：客户端</p><h2 id="防止sql注入"><a href="#防止sql注入" class="headerlink" title="防止sql注入"></a>防止sql注入</h2><p>sql注入：针对程序员编写的疏忽，通过sql语句实现无账号登录，甚至篡改数据库</p><p>使用jdbc的时候不能用statement类，要用PrepareStatement类</p><p>statement类只是取一下变量的值，有可能造成sql注入</p><p>prepareStatement类是预编译的，不会存在sql注入问题</p><p>mybatis使用#号来接受值，不能使用$号来接受值，没有经过预编译有可能产生sql注入问题</p><p>mybatis使用#号传入的参数在sql中显示为字符串，可以防止sql注入 #占位符</p><p>$号传入的参数直接显示为传入的值   $拼接符</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>常用数据结构：String、List、Hash、Set、Zset</p><p>数据都是存在内存里</p><p>持久化：保存在磁盘</p><p>AOF:以日志方式记录每个写操作，只记录写操作</p><p>RDB:定时将内存中的数据以快照方式写入磁盘</p><p>淘汰策略：</p><ol><li><p>noeviction:默认策略，不淘汰，如果内存已满，添加数据是报错。</p></li><li><p>allkeys-lru:在所有键中，选取最近最少使用的数据抛弃。</p></li><li><p>volatile-lru:在设置了过期时间的所有键中，选取最近最少使用的数据抛弃。</p></li><li><p>allkeys-random: 在所有键中，随机抛弃。</p></li><li><p>volatile-random: 在设置了过期时间的所有键，随机抛弃。</p></li><li><p>volatile-ttl:在设置了过期时间的所有键，抛弃存活时间最短的数据。</p></li></ol><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>IOC：控制反转，对象不再由用户创建管理，而是交给spring容器创建和管理</p><p>AOP:面向切面编程。 动态代理实现</p><p>对象生命周期：（不是很清楚）</p><p>1.spring启动，查找并加载需要被spring管理的bean，进行bean的实例化</p><p>2.为bean注入属性</p><p>3.初始化</p><p>4.销毁</p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>底层通过数组实现，查询通过下标</p><p>扩容机制：以无参构造函数创建ArrayList时，初始化的是一个空数组，整整对数组添加元素时，数组容量扩为10，需要的容量大于数组长度时，扩容为1.5倍</p><p>搜索快，增删慢</p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>底层是链表实现</p><p>搜索慢，增删快</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>通过每个线程单独一份存储空间，线程隔离，不会影响其他线程</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>创建方式：1.继承Thread类       2.实现Runnable接口</p><p>线程池：线程池中包含许多准备运行的线程，如果需要用到线程，就会调用run方法，当run方法退出时这个线程不会死亡，而是留在线程池中等待下一次调用。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>单例模式：一个类只有一个实例。  </p><p>懒汉式：当你去调用的时候才会去创建一个实例</p><p>饿汉式：还没等你去调用就给你创建</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>7-6学习笔记</title>
    <link href="/2020/07/13/7-6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/13/7-6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>jdk1.7：数组+链表</p><p>jdk1.8以后：数组+链表+红黑树</p><p>时间复杂度：O(1) 常数级   不考虑hash冲突一次定位</p><p><strong>哈希冲突</strong>：两个不同的数据计算后的哈希值相同</p><p>解决方法：开放地址法、链地址法、再哈希法、创建公共溢出区</p><p>初始容量16 ，加载因子0.75</p><p>执行put方法的时候创建数组</p><p>数组容量超过总容量*0.75的时候，数组扩容</p><p>HashMap的数组长度一定是2的次幂：为了减少哈希冲突</p><p>（链地址法）当链表长度大于8，将链表转换为红黑树。链表长度小于6，又将红黑树转换为链表。</p><p>根据key计算hash值，put的时候判断数组是否存在，不存在则创建大小为16的数组。确定插入的位置，（n-1）&amp;hash值（与操作只有都是1结果才是1），找到hash槽若是第一个则直接插入，若哈希冲突，key相同则替换value值，key不同则插入链表或者红黑树。</p><p>允许空键值</p><p>线程不安全：put的时候多线程数据不一致。多线程使用ConcurrentHashMap</p><p>红黑树：一种自平衡二叉搜索树</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>快速获取数据的数据结结构</p><p>没有索引则逐条查询</p><p>Mysql使用B+Tree ：非叶子节点不存储data，只存储索引，可以存放更多的索引。比b树更矮。</p><p>B+树所有叶节点构成一个有序链表，数据库查询大多为区间查询，B+数天然具备排序功能，全节点遍历更快</p><p>B树进行区间查询需要不断进行中序遍历</p><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MyISAM：不支持事务</p><p>InnoDB：聚簇索引，通过主键，若没有定义主键，会选择一个不重复的非空索引代替，如果没有，则隐式定义一个主键作为聚簇索引。</p><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>堆          虚拟机栈              本地方法栈</p><p>方法区                       程序计数器</p><p>堆:存放实例对象，线程共享</p><p>虚拟机栈：栈帧：方法（局部变量表、操作数栈、动态链接、方法出口）线程私有</p><p>方法区（元空间）：类信息、常量池、静态变量 。线程共享</p><p>程序计数器：记录当前线程运行jvm指令码的行号。线程私有</p><p>对象在新生代Eden区中分配，当Eden空间不够虚拟机会发起Minor GC</p><p>Eden：S0:S1 = 8:1:1</p><p>老年代满了会发起Full GC</p><h2 id="JMM（java内存模型）"><a href="#JMM（java内存模型）" class="headerlink" title="JMM（java内存模型）"></a>JMM（java内存模型）</h2><p>基于cpu缓存模型来建立</p><p>violate：java虚拟机提供的轻量级的同步机制</p><p>violate保证可见性和有序性，不保证原子性。保证原子性需要借助synchronized </p><p><img src="C:%5CUsers%5Cmua%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200707103706999.png" srcset="/img/loading.gif" alt="image-20200707103706999"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2020/07/04/Docker/"/>
    <url>/2020/07/04/Docker/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；<br>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使<br>用这个镜像；<br>运行中的这个镜像称为容器，容器启动是非常快速的  </p><h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h2><pre><code class="hljs shell">vagrant up 运行虚拟机vagrant ssh 连接虚拟机docker search tomcat 搜索镜像docker pull tomcat  拉取镜像docker run‐‐name mytomcat‐d tomcat:latest 根据镜像启动容器docker ps  查看运行中的容器docker stop 容器的id  停止运行中的容器docker ps‐a 查看所有的容器docker start 容器id  启动容器docker rm 容器id   删除一个容器</code></pre><h2 id="3-安装mysql"><a href="#3-安装mysql" class="headerlink" title="3.安装mysql"></a>3.安装mysql</h2><pre><code class="hljs shel">sudo  docker images 查看镜像  sudo docker pull mysql:5.7   下载镜像sudo docker rmi IMAGE ID 删除镜像sudo docker update mysql --restart&#x3D;always &#x2F;&#x2F;开机启动</code></pre><pre><code class="hljs shel">docker运行mysql命令：docker run -p 3306:3306 --name mysql \-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql \-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql \-e MYSQL_ROOT_PASSWORD&#x3D;root \-d mysql:5.7</code></pre><pre><code class="hljs shel">docker下mysql配置[client]default-character-set&#x3D;utf8[mysql]default-character-set&#x3D;utf8[mysqld]init_connect&#x3D;&#39;SET collation_connection &#x3D; utf8_unicode_ci&#39;init_connect&#x3D;&#39;SET NAMES utf8&#39;character-set-server&#x3D;utf8collation-server&#x3D;utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve</code></pre><pre><code class="hljs shel">redis 命令mkdir -p &#x2F;mydata&#x2F;redis&#x2F;conftouch &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.confdocker run -p 6379:6379 --name redis -v &#x2F;mydata&#x2F;redis&#x2F;data:&#x2F;data \-v&#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</code></pre><p>elasticsearch 启动命令</p><pre><code class="hljs yaml"><span class="hljs-string">elasticsearch</span> <span class="hljs-string">启动命令</span><span class="hljs-string">docker</span> <span class="hljs-string">run</span> <span class="hljs-string">--name</span> <span class="hljs-string">elasticsearch</span> <span class="hljs-string">-p</span> <span class="hljs-number">9200</span><span class="hljs-string">:9200</span> <span class="hljs-string">-p</span> <span class="hljs-number">9300</span><span class="hljs-string">:9300</span> <span class="hljs-string">\</span><span class="hljs-string">-e</span> <span class="hljs-string">"discovery.type=single-node"</span> <span class="hljs-string">\</span><span class="hljs-string">-e</span> <span class="hljs-string">ES_JAVA_OPTS="-Xms64m</span> <span class="hljs-string">-Xmx128m"</span> <span class="hljs-string">\</span><span class="hljs-string">-v</span> <span class="hljs-string">/mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span> <span class="hljs-string">\</span><span class="hljs-string">-v</span> <span class="hljs-string">/mydata/elasticsearch/data:/usr/share/elasticsearch/data</span> <span class="hljs-string">\</span><span class="hljs-string">-v</span> <span class="hljs-string">/mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span> <span class="hljs-string">\</span><span class="hljs-string">-d</span> <span class="hljs-string">elasticsearch:7.4.2</span></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JSR303校验</title>
    <link href="/2020/07/03/JSR303%E6%A0%A1%E9%AA%8C/"/>
    <url>/2020/07/03/JSR303%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h1><p>1.给Bean添加校验注解并定义自己的message提示<br>2.开启校验功能<code>@Vaild</code><br>  效果：校验错误会有默认的响应<br>3.给校验的bean后紧跟一个BindingResult,就可以获取到校验的结果<br>4.分组校验（多场景的复杂校验）<br>   1）<code>@NotBlank(message = &quot;品牌名不能为空&quot;,groups = {AddGroup.class,UpdateGroup.class})</code><br>   给校验注解标注什么情况下需要进行校验<br>   2）<code>@Validated({AddGroup.class})</code><br>   3）默认没有指定分组的校验注解@NotBlank,在分组校验情况下不生效，只会在@Validated下生效<br>5.自定义校验<br>   1）编写一个自定义的校验注解<br>   2）编写一个自定义的校验器ConstraintValidator<br>   3）关联自定义的校验器和自定义的校验注解</p><pre><code class="hljs less"><span class="hljs-variable">@Documented</span><span class="hljs-variable">@Constraint</span>(validatedBy = &#123;ListValueConstraintValidator.class&#125;)可以指定多个不同的校验器适配不同类型的校验<span class="hljs-variable">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR,ElementType.PARAMETER, ElementType.TYPE_USE&#125;)<span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)public <span class="hljs-variable">@interface</span> ListValue &#123;</code></pre><h5 id="统一的异常处理"><a href="#统一的异常处理" class="headerlink" title="统一的异常处理"></a>统一的异常处理</h5><p>   <code>@ControllerAdvice</code><br>  1）编写异常处理类，使用<code>@ControllerAdvice</code><br>  2）使用<code>@ExceptionHandler</code>标注可以处理的异常的方法</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
