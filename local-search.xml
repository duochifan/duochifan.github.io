<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JSR303校验</title>
    <link href="/2020/07/03/JSR303%E6%A0%A1%E9%AA%8C/"/>
    <url>/2020/07/03/JSR303%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="JSR303校验"><a href="#JSR303校验" class="headerlink" title="JSR303校验"></a>JSR303校验</h1><p>1.给Bean添加校验注解并定义自己的message提示<br>2.开启校验功能<code>@Vaild</code><br>  效果：校验错误会有默认的响应<br>3.给校验的bean后紧跟一个BindingResult,就可以获取到校验的结果<br>4.分组校验（多场景的复杂校验）<br>   1）<code>@NotBlank(message = &quot;品牌名不能为空&quot;,groups = {AddGroup.class,UpdateGroup.class})</code><br>   给校验注解标注什么情况下需要进行校验<br>   2）<code>@Validated({AddGroup.class})</code><br>   3）默认没有指定分组的校验注解@NotBlank,在分组校验情况下不生效，只会在@Validated下生效<br>5.自定义校验<br>   1）编写一个自定义的校验注解<br>   2）编写一个自定义的校验器ConstraintValidator<br>   3）关联自定义的校验器和自定义的校验注解</p><pre><code class="hljs less"><span class="hljs-variable">@Documented</span><span class="hljs-variable">@Constraint</span>(validatedBy = &#123;ListValueConstraintValidator.class&#125;)可以指定多个不同的校验器适配不同类型的校验<span class="hljs-variable">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR,ElementType.PARAMETER, ElementType.TYPE_USE&#125;)<span class="hljs-variable">@Retention</span>(RetentionPolicy.RUNTIME)public <span class="hljs-variable">@interface</span> ListValue &#123;</code></pre><h5 id="统一的异常处理"><a href="#统一的异常处理" class="headerlink" title="统一的异常处理"></a>统一的异常处理</h5><p>   <code>@ControllerAdvice</code><br>  1）编写异常处理类，使用<code>@ControllerAdvice</code><br>  2）使用<code>@ExceptionHandler</code>标注可以处理的异常的方法</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
